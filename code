using UnityEngine;
using System.Collections;

[RequireComponent(typeof(MeshFilter), typeof(MeshRenderer))]
public class ProceduralGrid : MonoBehaviour
{
    public int xSize, ySize;
    public float noiseScale = 0.3f; 
    public float noiseHeight = 2.0f; 
    private Vector3[] vertices; 
    private Mesh mesh; 

    private void Awake()
    {
        StartCoroutine(Generate());
    }

    private IEnumerator Generate()
    {
        WaitForSeconds wait = new WaitForSeconds(0.05f); 

        GetComponent<MeshFilter>().mesh = mesh = new Mesh(); 
        mesh.name = "Procedural Grid"; 

        vertices = new Vector3[(xSize + 1) * (ySize + 1)];
        for (int i = 0, y = 0; y <= ySize; y++) 
        {
            for (int x = 0; x <= xSize; x++, i++)
            {
                float z = Mathf.PerlinNoise(x * noiseScale, y * noiseScale) * noiseHeight; 
                vertices[i] = new Vector3(x, y, z); 
                yield return wait; 
            }
        }
        mesh.vertices = vertices;

        int[] triangles = new int[xSize * ySize * 6]; 
        for (int ti = 0, vi = 0, y = 0; y < ySize; y++, vi++) 
        {
            for (int x = 0; x < xSize; x++, ti += 6, vi++)
            {
                triangles[ti] = vi;
                triangles[ti + 1] = triangles[ti + 4] = vi + xSize + 1;
                triangles[ti + 2] = vi + 1;
                triangles[ti + 3] = vi + 1;
                triangles[ti + 5] = vi + xSize + 2;
                yield return wait; 
            }
        }
        mesh.triangles = triangles;
        mesh.RecalculateNormals(); 
    }

    private void OnDrawGizmos()
    {
        if (vertices == null) return;

        Gizmos.color = Color.black; 
        for (int i = 0; i < vertices.Length; i++) 
        {
            Gizmos.DrawSphere(vertices[i], 0.1f); 
        }
    }
}
